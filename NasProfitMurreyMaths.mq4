/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2004, MetaQuotes Software Corp."
#property link      "http://www.metaquotes.net/"

#include <WinUser32.mqh>
#include <stdlib.mqh>
#include <flexielib.mqh>
#include <tradelib.mqh>
#include <timelib.mqh>

double gda_76[2];
int g_slippage_80;
bool gi_84 = TRUE;
bool gi_unused_88 = TRUE;
bool gi_92 = TRUE;
string gs_96 = "2020.11.30";
extern bool OpenMurreyBoundary = True;
extern int MaxTrade = 10;
extern int StepBack = 0;
extern bool UseHourTrade = FALSE;
extern int DayTradeStartTime = 1;
extern int DayTradeEndTime = 18;
extern int NightTradeStartTime = 18;
extern int NightTradeEndTime = 1;
bool gba_124[100];
int gia_unused_128[100];
double gda_unused_132[100];
string gsa_unused_136[100];
int gia_unused_140[100];
double gda_unused_144[25];
string gsa_148[] = {"None", "Limit", "Stop"};
int gi_unused_152 = 1;
int gi_unused_156 = 2;
int gi_unused_160 = 1;
int gi_unused_164 = 0;
int gi_unused_168 = 3;
int gi_unused_172 = -1;
int gi_unused_176 = -1;
int gi_unused_180 = 3;
int gi_184 = 2;
int gi_188 = 1;
int gi_unused_192 = 3;
int gi_unused_196 = 2;
int gi_unused_200 = 1;
int gi_unused_204 = 1;
int gi_unused_208 = 2;
int gi_unused_212 = 2;
int gi_unused_216 = 1;
int gi_220 = 2;
int gi_unused_224 = 1;
int gi_unused_228 = 0;
int gi_unused_232 = 1;
int gi_unused_236 = 2;
int gi_unused_240 = 3;
int gi_unused_244 = 4;
string gsa_248[] = {"Reset", "Waiting", "In trade", "Closing", "Done Today"};
bool gi_unused_252 = FALSE;
bool gi_unused_256 = TRUE;
int gi_unused_260 = 60;
int gi_unused_264 = 900;
int gi_unused_268 = 1800;
int gi_unused_272 = 3600;
int gi_unused_276 = 5400;
int gi_unused_280 = 7200;
int gi_unused_284 = 1;
int gi_unused_288 = 2;
int gi_unused_292 = 3;
int gi_unused_296 = 4;
int gi_300 = 1;
int gi_unused_304 = 0;
int gi_unused_308 = 1;
int gi_unused_312 = 0;
int gi_unused_316 = 1;
int gi_unused_320 = 0;
int gi_unused_324 = 1;
int gi_unused_328 = 0;
int gi_unused_332 = 1;
int gi_unused_336 = 0;
int gi_unused_340 = 1;
int gi_unused_344 = 0;
int gi_unused_348 = 1;
int gi_unused_352 = 0;
int gi_unused_356 = 0;
int gi_unused_360 = 1;
int gi_unused_364 = 0;
int gi_unused_368 = 1;
int gi_372 = 0;
int gi_376 = 1;
int gi_unused_380 = 2;
int gi_unused_384 = 3;
int gi_unused_388 = 1;
string gsa_392[] = {"blank", "Waiting", "Preset", "Entry", "Manage"};
string gsa_396[] = {"blank", "SHORT", "LONG", "NEUTRAL"};
string gsa_400[] = {"blank", "Below", "Above"};
string gsa_404[] = {"blank", "Check", "Clear", "Set"};
string gsa_408[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};
string gsa_412[] = {"Manual", "Auto"};
string gsa_416[] = {"Micro", "Mini", "Standard"};
string gsa_420[] = {"blank", "Short", "Long"};
int gi_424;
int gi_428;
string gs_432;
string gs_440;
string gsa_448[] = {"Aussie Loonie ", "Aussie Kiwi ", "Aussie Yen ", "Aussie Dollar ", "Swissy Yen", "Euro Aussie", "Euro Loonie", "Euro Swissy", "Euro Pound ", "Euro Yen ", "Euro ", "Pound Swissy ", "Pound Yen ", "Pound ", "Loonie ", "Swissy ", "Dollar Yen ", "Gold ", "Silver ", "Kiwi Yen", "Kiwi Dollar"};
string gsa_452[] = {"DEMO", "Invalid", "Connect"};
int gia_unused_456[10];
double gda_unused_460[1000];
double gda_unused_464[1000];
double gda_unused_468[1000];
double gda_unused_472[1000];
string gsa_476[] = {"Server", "GMT", "Local"};
string gsa_480[] = {"Unknown", "Interbank FX, LLC", "FXDirectDealer", "Demo Account", "North Finance Company Ltd", "FOREX", "Alpari (UK) Ltd.", "Rosenthal Collins Group, LLC"};
int gi_unused_484 = 8;
int gi_unused_488 = 1;
int gi_unused_492 = 2;
int gia_496[] = {0, 0, 3, 3, 3, 0, 2, 5};
string gs_000000_500 = "000000";
string gs_unused_508 = "info@intelatrader.com";
string gs_516 = "Copyright © 2008";
bool gi_524 = FALSE;
bool gi_528 = TRUE;
bool gi_532 = FALSE;
int gi_536 = 0;
string gs_dummy_540;
string gs_548;
string gs_dummy_556;
bool TradeEnable;
extern bool BreakoutLot = False;
bool gi_568 = FALSE;
bool gi_572 = TRUE;
extern int GridOpen = 0;
extern int GridProfit = 0;
extern int DailyProfit = 1000;
extern double MaximumRisk = 0.01;
extern double DecreaseFactor = 3.0;
extern int Lot.Margin = 500;
extern bool UseManualLot = FALSE;
extern double eLotSize = 0.0;
extern string DynamicSettings = "=== Dynamic Settings===";
extern bool DynamicPercentage = FALSE;
extern int ADRPercentOpen = 0;
extern int ADRPercentProfit = 0;
extern string ConfigSettings = "=== Configuration Settings===";
extern int EA_ID = 1;
extern int Code = 0;
extern bool RobustDebug = FALSE;
extern bool InstantOrders = FALSE;
bool gi_unused_664 = FALSE;
bool gi_668 = FALSE;
bool gi_672 = FALSE;
bool gi_676 = TRUE;
bool gi_unused_680 = FALSE;
bool gi_684 = FALSE;
bool gi_688 = FALSE;
int gi_unused_692 = 1;
int gi_unused_696 = 100;
int gi_unused_700 = 5;
string gs_dummy_704;
bool gi_unused_712 = TRUE;
bool gi_716 = TRUE;
bool gi_unused_720 = TRUE;
bool gi_unused_724 = TRUE;
int gi_unused_728 = 10;
int gi_732 = 10;
int gi_736 = 16711680;
int gi_740 = 8388608;
int gi_744 = 9221330;
int gi_748 = 16777215;
int gi_752;
int gi_756;
double gd_760;
string gs_unused_768;
double gd_776 = 0.0;
double gd_unused_784 = 3.0;
double gd_792 = 0.0;
double gd_800;
double gd_808;
double gd_816;
double gd_824;
bool gi_832 = FALSE;
bool gi_836 = FALSE;
int gi_840 = 0;
int gi_844;
int gi_unused_848 = 12;
int gi_852 = 0;
string gsa_856[] = {"Resetting", "Direction", " Up", " Down"};
int gi_860 = 0;
int gi_864;
bool gi_868 = TRUE;
bool g_global_var_872;
extern int Days2Average = 20;
extern int Months2Average = 3;
int gi_unused_884 = 0;
double gd_888;
int gi_1028;

double PreviousTrade;
bool ContinueOpening=True;

double GetSizeLot() {
   return (LotsOptimized());
}

double LotsOptimized() {
   int l_hist_total_8 = OrdersHistoryTotal();
   int l_count_12 = 0;
   double ld_ret_0 = NormalizeDouble(AccountFreeMargin() * MaximumRisk / Lot.Margin, 2);
   if (DecreaseFactor > 0.0) {
      for (int l_hist_total_16 = l_hist_total_8; l_hist_total_16 >= 0; l_hist_total_16--) {
         if (OrderSelect(l_hist_total_16, SELECT_BY_POS, MODE_HISTORY) == FALSE) {
            // Print("Error in history!");
            break;
         }
         if (OrderSymbol() != Symbol() || OrderType() > OP_SELL) continue;
         if (OrderProfit() > 0.0) break;
         if (OrderProfit() < 0.0) l_count_12++;
      }
      if (l_count_12 > 1) ld_ret_0 = NormalizeDouble(ld_ret_0 - ld_ret_0 * l_count_12 / DecreaseFactor, 2);
   }
   if (ld_ret_0 < 0.01) ld_ret_0 = 0.01;
   if (BreakoutLot)     ld_ret_0 = ld_ret_0 / 2;
   return (ld_ret_0);
}

void CloseBox() {
   int li_0 = OrdersTotal() - 1;
   if (gi_84) {
      for (int l_pos_4 = li_0; l_pos_4 >= 0; l_pos_4--)
         if (OrderSelect(l_pos_4, SELECT_BY_POS, MODE_TRADES) && OrderType() <= OP_SELL && GetMarketInfo() && !OrderClose(OrderTicket(), OrderLots(), gda_76[1 - OrderType()], g_slippage_80)) Print(OrderError());
   }
}

string OrderError() {
   int l_error_0 = GetLastError();
   return (StringConcatenate("Order:", OrderTicket(), " GetLastError()=", l_error_0, " ", ErrorDescription(l_error_0)));
}

int GetMarketInfo() {
   RefreshRates();
   gda_76[0] = MarketInfo(OrderSymbol(), MODE_ASK);
   gda_76[1] = MarketInfo(OrderSymbol(), MODE_BID);
   double l_point_0 = MarketInfo(OrderSymbol(), MODE_POINT);
   if (l_point_0 == 0.0) return (0);
   g_slippage_80 = (gda_76[0] - gda_76[1]) / l_point_0;
   return (gda_76[0] > 0.0 && gda_76[1] > 0.0);
}

void debugMsg(string as_0) {
   if (RobustDebug) Print(as_0);
}

int checkITradeDemoAccount() {
   if (AccountNumber() / 100000 == 6) return (1);
   return (0);
}

int init() {
// maxtrade evaluation function
PreviousTrade=0;
   for(int cnt=0;cnt<OrdersTotal();cnt++)   
   {
     OrderSelect(cnt, SELECT_BY_POS, MODE_TRADES);
	  if (OrderSymbol()==Symbol())
	  {				
	  	  PreviousTrade++;
	  	  //if (OrderLots()>=0.1){HedgeBuyPlus=1;HedgeSellPlus=1;}
	  }
   }     
    
   if (PreviousTrade>= MaxTrade) 
   {
	  ContinueOpening=False;
   } else {
	  ContinueOpening=True;
   }
   //end
   
   
//Murrey MathSin 
   if (Period() == PERIOD_M1) gi_1028 = 1;
   if (Period() == PERIOD_M5) gi_1028 = 2;
   if (Period() == PERIOD_M15) gi_1028 = 4;
   if (Period() == PERIOD_M30) gi_1028 = 8;
   if (Period() == PERIOD_H1) gi_1028 = 16;
   if (Period() == PERIOD_H4) gi_1028 = 32;
   if (Period() == PERIOD_D1) gi_1028 = 64;
   if (Period() == PERIOD_W1) gi_1028 = 1024;
   if (Period() == PERIOD_MN1) gi_1028 = 4096;
   //end
   gs_432 = "NasProfit";
   gs_440 = "1.9";
   gs_unused_768 = gs_432;
   if (gi_524) {
      GridOpen = TRUE;
      GridProfit = 3;
      gd_888 = 0.01;
      TradeEnable = TRUE;
   } else {
      if (Code == 159753) gi_524 = TRUE;
      else {
         doHUD(1);
         gi_524 = FALSE;
      }
   }
   gs_000000_500 = AccountNumber();
   if (EA_ID > 0) gi_844 = EA_ID;
   gi_424 = GetPair(Symbol());
   gi_428 = 1000000 * gi_424 + gi_844;
   TradeGate(gs_432, 4, gi_428, 0);
   double ld_0 = GetDailyRange(Days2Average, 0);
   if (DynamicPercentage) {
      GridOpen = ld_0 * ADRPercentOpen / 100.0;
      GridProfit = ld_0 * ADRPercentProfit / 100.0;
   }
   if (!IsDemo() && AccountServer() == "ITradeFX-Demo" && checkITradeDemoAccount()) {
      gi_532 = FALSE;
      MyAlerts("Welcome to " + gs_432 + " " + gs_440 + " <<< I-TradeFX DEMO TRADING >>> " + gsa_448[gi_424], gi_300, gi_668, gi_688, gi_684, gi_672);
   } else {
      if (!IsDemo() && AccountNumber() == StrToInteger(gs_000000_500)) {
         gi_532 = TRUE;
         MyAlerts("Welcome to " + gs_432 + " " + gs_440 + ", Account Number " + gs_000000_500 + " >>> " + gsa_448[gi_424], gi_300, gi_668, gi_688, gi_684, gi_672);
      } else {
         if (!IsDemo() && AccountNumber() != StrToInteger(gs_000000_500)) {
            gi_532 = FALSE;
            MyAlerts("Your EA does not support this account, please try on a Demo Account", gi_300, gi_668, gi_688, gi_684, gi_672);
            doHUD(1);
            return (0);
         }
         gi_532 = FALSE;
         MyAlerts("Welcome to " + gs_432 + " " + gs_440 + " <<< DEMO TRADING >>> " + gsa_448[gi_424], gi_300, gi_668, gi_688, gi_684, gi_672);
      }
   }
   if (gi_532) gi_536 = gi_220;
   if (gi_568) {
      if (MessageBox("Are you sure you want to close all trades ?", "Last chance", MB_YESNO|MB_ICONQUESTION) == IDYES) {
         if (TradeOn(Symbol(), 0, gi_844)) CloseAllTrades(gi_184, gi_428);
         else
            if (TradeOn(Symbol(), 1, gi_844)) CloseAllTrades(gi_188, gi_428);
         gi_568 = FALSE;
         if (MessageBox("Shall we restart the EA ?", "Enable EA", MB_YESNO|MB_ICONQUESTION) == IDYES) TradeEnable = TRUE;
         else TradeEnable = FALSE;
      }
   }
   if (gi_716) {
      gi_752 = gi_744;
      gi_756 = gi_748;
   } else {
      gi_752 = gi_736;
      gi_756 = gi_740;
   }
   gi_864 = TimeCheckBroker();
   gs_548 = TimeToStr(TimeLocal(), TIME_DATE) + " - " + gs_432 + " - " + gsa_448[gi_424] + " Activity";
   if (gi_676) {
      Log(gs_548, " ", 0);
      Log(gs_548, "<- Server time\t\t" + gs_432 + " " + gs_440 + " ready >> " + gsa_480[gi_864] + " TimeSource:" + gi_860 + " CpID:" + gi_428, 0);
      Log(gs_548, BrokerData(), 0);
      Log(gs_548, "Grid: " + DoubleToStr(GridOpen, 2) + " TP: " + DoubleToStr(GridProfit, 2) + " LotSize: " + DoubleToStr(gd_888, 2), 0);
   }
   gd_792 = 0;
   gi_852 = 0;
   if (GlobalVariableCheck("$BuildBasket")) g_global_var_872 = GlobalVariableGet("$BuildBasket");
   else g_global_var_872 = TRUE;
   doHUD(0);
   CheckEaStatus(gba_124);
   return (0);
}

int deinit() {
   if (gi_524) ObjectsDeleteAll();
   return (0);
}

int start() {

//Maxtrade function
PreviousTrade=0;
   
   for(int cnt=0;cnt<OrdersTotal();cnt++)   
   {
     OrderSelect(cnt, SELECT_BY_POS, MODE_TRADES);
	  if (OrderSymbol()==Symbol())
	  {				
	  	  PreviousTrade++;
	  }
   }     
    
   if (PreviousTrade>=MaxTrade) 
   {
	  ContinueOpening=False;
   } else {
	  ContinueOpening=True;
	  }
   //end

// murrey maths details
// murrey MathSin
double gda_400[13];
double gda_404[13];
double gda_408[13];
double gda_412[13];
double gda_416[13];
double gda_420[13];
double gda_424[13];
double gd_420;
double gd_428;
double gd_436;
double gd_444;
double gd_452;
double gd_460;
double gd_468;
double gd_476;
double gd_484;
double gd_492;
double gd_500;
double gd_508;
double gd_516;
double gd_524;
double gd_532;
double gd_540;
double gd_548;
double gd_556;
double gd_564;
double gd_572;
double gd_580;
double g_time_596;
double gd_604;
string gs_612;
double gd_620;
double gd_628;
double gd_636;
double gd_644;
int gi_unused_652 = 0;
int gi_unused_656 = 0;
int gi_unused_660 = 0;
int gi_unused_664 = 0;
int gi_unused_668 = 0;
int gi_672 = 0;
int gi_676 = 0;
int gi_680 = 0;
int gi_684 = 0;
double gd_688 = 0.0;
double gd_696 = 0.0;
double gd_unused_704 = 0.0;
double gd_unused_712 = 0.0;
double gd_720 = 0.0;
double gd_728 = 0.0;
double gd_unused_736 = 0.0;
double gd_744 = 0.0;
double g_ilow_752 = 0.0;
double g_ihigh_760 = 0.0;
double gd_unused_768 = 0.0;
double gd_unused_776 = 0.0;
double gd_784 = 0.0;
double gd_792 = 0.0;
double gd_800 = 0.0;
double gd_808 = 0.0;
double gd_816 = 0.0;
double gd_824 = 0.0;
double gd_832 = 0.0;
double gd_840 = 0.0;
double gd_848 = 0.0;
double gd_856 = 0.0;
double gd_864 = 0.0;
double gd_872 = 0.0;
double gd_880 = 0.0;
double gd_888 = 0.0;
double gd_896 = 0.0;
double gd_904 = 0.0;
double gd_912 = 0.0;
double gd_920 = 0.0;
double gd_928 = 0.0;
double gda_936[13];
string gsa_940[13];
string g_name_944 = "";
int g_lowest_952 = 0;
int g_highest_956 = 0;
int gi_unused_960 = 0;
int gi_unused_964 = 0;
int gi_unused_968 = 0;
int gi_unused_972 = 0;
int gi_unused_976 = 0;
int gi_unused_980 = 0;
int gi_unused_984 = 0;
int gi_unused_988 = 0;
int gi_unused_992 = 0;
int gi_unused_996 = 0;
int gi_1000 = 13;
int gia_1004[13];
int gia_1008[13];
int g_price_1012 = 40;
int gi_1016 = 0;
int g_timeframe_1020 = 0;
int g_index_1024 = 0;
int gi_1028;
int gi_unused_1032 = 0;

gi_1028 = 2;
      if (gi_1028 == 2) {
         g_lowest_952 = iLowest(NULL, PERIOD_D1, MODE_LOW, 2, StepBack);
         g_highest_956 = iHighest(NULL, PERIOD_D1, MODE_HIGH, 2, StepBack);
         g_ilow_752 = iLow(NULL, PERIOD_D1, g_lowest_952);
         g_ihigh_760 = iHigh(NULL, PERIOD_D1, g_highest_956);
         Comment("Murrey Math ", DoubleToStr(gi_1028, 0), " day frame");
         if (g_ihigh_760 <= 250000.0 && g_ihigh_760 > 25000.0) gd_904 = 100000;
         else {
            if (g_ihigh_760 <= 25000.0 && g_ihigh_760 > 2500.0) gd_904 = 10000;
            else {
               if (g_ihigh_760 <= 2500.0 && g_ihigh_760 > 250.0) gd_904 = 1000;
               else {
                  if (g_ihigh_760 <= 250.0 && g_ihigh_760 > 25.0) gd_904 = 100;
                  else {
                     if (g_ihigh_760 <= 25.0 && g_ihigh_760 > 12.5) gd_904 = 12.5;
                     else {
                        if (g_ihigh_760 <= 12.5 && g_ihigh_760 > 6.25) gd_904 = 12.5;
                        else {
                           if (g_ihigh_760 <= 6.25 && g_ihigh_760 > 3.125) gd_904 = 6.25;
                           else {
                              if (g_ihigh_760 <= 3.125 && g_ihigh_760 > 1.5625) gd_904 = 3.125;
                              else {
                                 if (g_ihigh_760 <= 1.5625 && g_ihigh_760 > 0.390625) gd_904 = 1.5625;
                                 else
                                    if (g_ihigh_760 <= 0.390625 && g_ihigh_760 > 0.0) gd_904 = 0.1953125;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         gd_912 = g_ihigh_760 - g_ilow_752;
         gd_744 = MathFloor(MathLog(gd_904 / gd_912) / MathLog(2));
         gd_896 = gd_904 * MathPow(0.5, gd_744);
         gd_784 = MathFloor(g_ilow_752 / gd_896) * gd_896;
         if (gd_784 + gd_896 > g_ihigh_760) gd_792 = gd_784 + gd_896;
         else gd_792 = gd_784 + 2.0 * gd_896;
         if (g_ilow_752 >= 3.0 * (gd_792 - gd_784) / 16.0 + gd_784 && g_ihigh_760 <= 9.0 * (gd_792 - gd_784) / 16.0 + gd_784) gd_808 = gd_784 + (gd_792 - gd_784) / 2.0;
         else gd_808 = 0;
         if (g_ilow_752 >= gd_784 - (gd_792 - gd_784) / 8.0 && g_ihigh_760 <= 5.0 * (gd_792 - gd_784) / 8.0 + gd_784 && gd_808 == 0.0) gd_800 = gd_784 + (gd_792 - gd_784) / 2.0;
         else gd_800 = 0;
         if (g_ilow_752 >= gd_784 + 7.0 * (gd_792 - gd_784) / 16.0 && g_ihigh_760 <= 13.0 * (gd_792 - gd_784) / 16.0 + gd_784) gd_824 = gd_784 + 3.0 * (gd_792 - gd_784) / 4.0;
         else gd_824 = 0;
         if (g_ilow_752 >= gd_784 + 3.0 * (gd_792 - gd_784) / 8.0 && g_ihigh_760 <= 9.0 * (gd_792 - gd_784) / 8.0 + gd_784 && gd_824 == 0.0) gd_832 = gd_792;
         else gd_832 = 0;
         if (g_ilow_752 >= gd_784 + (gd_792 - gd_784) / 8.0 && g_ihigh_760 <= 7.0 * (gd_792 - gd_784) / 8.0 + gd_784 && gd_800 == 0.0 && gd_808 == 0.0 && gd_824 == 0.0 && gd_832 == 0.0) gd_816 = gd_784 + 3.0 * (gd_792 - gd_784) / 4.0;
         else gd_816 = 0;
         if (gd_800 + gd_808 + gd_816 + gd_824 + gd_832 == 0.0) gd_840 = gd_792;
         else gd_840 = 0;
         gd_920 = gd_800 + gd_808 + gd_816 + gd_824 + gd_832 + gd_840;
         if (gd_800 > 0.0) gd_848 = gd_784;
         else gd_848 = 0;
         if (gd_808 > 0.0) gd_856 = gd_784 + (gd_792 - gd_784) / 4.0;
         else gd_856 = 0;
         if (gd_816 > 0.0) gd_864 = gd_784 + (gd_792 - gd_784) / 4.0;
         else gd_864 = 0;
         if (gd_824 > 0.0) gd_872 = gd_784 + (gd_792 - gd_784) / 2.0;
         else gd_872 = 0;
         if (gd_832 > 0.0) gd_880 = gd_784 + (gd_792 - gd_784) / 2.0;
         else gd_880 = 0;
         if (gd_920 > 0.0 && gd_848 + gd_856 + gd_864 + gd_872 + gd_880 == 0.0) gd_888 = gd_784;
         else gd_888 = 0;
         gd_928 = gd_848 + gd_856 + gd_864 + gd_872 + gd_880 + gd_888;
         gd_720 = (gd_920 - gd_928) / 8.0;
         
         gda_404[0] = gd_928; // 0/8th
         
         gd_444 = gda_404[0] + 4.0 * gd_720; // 4/8th
         
        double gd_444b = gda_404[0] - 4.0 * gd_720; //mine perhap stop loss
        
         gd_452 = gda_404[0] + 8.0 * gd_720; // 8/8th 
         
         //Comment(" The Highest Value:    ", gd_452,"----Middle: ", gd_444,"----Lowest: ",gda_404[0]);
         Comment(" The Highest Value:    ", gd_452,"----OpenTrades: ", PreviousTrade,"----Lowest: ",gda_404[0]);
         
        
         gi_1016 = Time[0];
         g_timeframe_1020 = Period();
      }
      //end
      
   int l_str2time_0;
   bool li_12;
   int l_ticket_16;
   bool l_bool_20;
   if (gi_92) {
      l_str2time_0 = StrToTime(gs_96);
      if (TimeCurrent() >= l_str2time_0) {
         Comment("NasProfit EA TRIAL VERSION has expired! contact me on nasryusuf@yahoo.com for the full version for $1500 life-time license");
         return (0);
      }
   }
   if (UseManualLot == TRUE) gd_888 = eLotSize;
   else gd_888 = GetSizeLot();
   if (NormalizeDouble(AccountEquity(), Digits) - NormalizeDouble(AccountBalance(), Digits) >= DailyProfit) {
      Alert("The Basket close at AccountEquity = ", AccountEquity());
      CloseBox();
      RefreshRates();
      return (0);
   }
   if (Hour() >= 1 && Hour() <= 18) li_12 = TRUE;
   else li_12 = FALSE;
   if (UseHourTrade && li_12 == TRUE) {
      if (Hour() >= DayTradeStartTime && Hour() <= DayTradeEndTime) Comment("Day Trading Hours");
      else {
         if (NormalizeDouble(AccountEquity(), Digits) - NormalizeDouble(AccountBalance(), Digits) >= DailyProfit) {
            Alert("The Basket close at AccountEquity = ", AccountEquity());
            CloseBox();
            RefreshRates();
            return (0);
         }
         Comment("Day Non-trading Hours");
         return (0);
      }
   }
   if (UseHourTrade && li_12 == FALSE) {
      if (Hour() >= NightTradeStartTime && Hour() <= NightTradeEndTime) Comment(" Night Trading Hours");
      else {
         if (NormalizeDouble(AccountEquity(), Digits) - NormalizeDouble(AccountBalance(), Digits) >= DailyProfit) {
            Alert("The Basket close at AccountEquity = ", AccountEquity());
            CloseBox();
            RefreshRates();
            return (0);
         }
         Comment("Night Non-trading Hours");
         return (0);
      }
   }
   double ld_24 = GetDailyRange(Days2Average, 0);
   if (DynamicPercentage) {
      GridOpen = ld_24 * ADRPercentOpen / 100.0;
      GridProfit = ld_24 * ADRPercentProfit / 100.0;
   }
   gd_760 = Ask - Bid;
   string ls_32 = gs_432 + " ";
   if (AccountFreeMargin() < 1000.0 * gd_888) return (0);
   if (GlobalVariableCheck("$BuildBasket")) g_global_var_872 = GlobalVariableGet("$BuildBasket");
   else g_global_var_872 = TRUE;
   if (gd_792 == 0.0) {
      gd_792 = 1;
      gd_776 = GridOpen + gd_760 / Point;
      gd_816 = 999;
      gd_800 = Ask + GridOpen * Point;
      gd_808 = Bid - GridOpen * Point;
      gd_824 = 0;
   }
     
   if (gi_852 != 2 && gi_852 != 3) gi_852 = 1;
   if (Bid >= gd_800) {
      gi_852 = 2;
      if ( Ask > gd_452 || Bid < gda_404[0]) {TradeEnable = True;}
      if (TradeEnable && g_global_var_872) {
         if (gi_528) {
            if (!InstantOrders && Ask > gd_452 && ContinueOpening ==True ) {
               l_ticket_16 = MyOrderSend(Symbol(), 1, gd_888, Bid, 0, 0, ls_32 + gs_440 + " > " + gi_844, gi_844, gi_428);
               debugMsg(gs_432 + " sent new market trade, got Order# " + l_ticket_16);
               if (l_ticket_16 != -1) {
                  OrderSelect(l_ticket_16, SELECT_BY_TICKET);
                  l_bool_20 = OrderModify(OrderTicket(), OrderOpenPrice(), 0, OrderOpenPrice() - GridProfit * Point *10, 0);
                  debugMsg("Modifying Order#" + l_ticket_16 + "returned: " + l_bool_20);
               }
            } else {
               l_ticket_16 = MyOrderSend(Symbol(), 1, gd_888, Bid, 0, Bid - GridProfit * Point, ls_32 + gs_440 + " > " + gi_844, gi_844, gi_428);
               debugMsg(gs_432 + " sent new instant trade, got Order# " + l_ticket_16);
            }
         } else {
            if (!InstantOrders && gda_404[0] < Bid && ContinueOpening ==True) {
               l_ticket_16 = MyOrderSend(Symbol(), 0, gd_888, Ask, 0, 0, ls_32 + gs_440 + " > " + gi_844, gi_844, gi_428);
               debugMsg(gs_432 + " sent new market trade, got Order# " + l_ticket_16);
               if (l_ticket_16 != -1) {
                  OrderSelect(l_ticket_16, SELECT_BY_TICKET);
                  l_bool_20 = OrderModify(OrderTicket(), OrderOpenPrice(), 0, OrderOpenPrice() + GridProfit * Point*10, 0);
                  debugMsg("Modifying Order#" + l_ticket_16 + "returned: " + l_bool_20);
               }
            } else {
               l_ticket_16 = MyOrderSend(Symbol(), 0, gd_888, Ask, 0, Ask + GridProfit * Point, ls_32 + gs_440 + " > " + gi_844, gi_844, gi_428);
               debugMsg(gs_432 + " sent new instant trade, got Order# " + l_ticket_16);
            }
         }
      }
      gd_800 += gd_776 * Point;
      gd_824 = gd_800 - (gd_776 + GridOpen) * Point;
      gi_832 = TRUE;
      gi_836 = FALSE;
   }
   if (Ask <= gd_808) {
      gi_852 = 3;
      if ( Ask > gd_452 || Bid < gda_404[0]) {TradeEnable = True;}
      if (TradeEnable && g_global_var_872) {
         if (gi_528) {
            if (!InstantOrders && gda_404[0] < Bid && ContinueOpening ==True ) {
               l_ticket_16 = MyOrderSend(Symbol(), 0, gd_888, Ask, 0, 0, ls_32 + gs_440 + " > " + gi_844, gi_844, gi_428);
               debugMsg(gs_432 + " sent new market trade, got Order# " + l_ticket_16);
               if (l_ticket_16 != -1) {
                  OrderSelect(l_ticket_16, SELECT_BY_TICKET);
                  l_bool_20 = OrderModify(OrderTicket(), OrderOpenPrice(), 0, OrderOpenPrice() + GridProfit * Point*10, 0);
                  debugMsg("Modifying Order#" + l_ticket_16 + "returned: " + l_bool_20);
               }
            } else {
               l_ticket_16 = MyOrderSend(Symbol(), 0, gd_888, Ask, 0, Ask + GridProfit * Point, ls_32 + gs_440 + " > " + gi_844, gi_844, gi_428);
               debugMsg(gs_432 + " sent new instant trade, got Order# " + l_ticket_16);
            }
         } else {
            if (!InstantOrders && Ask > gd_452 && ContinueOpening ==True) {
               l_ticket_16 = MyOrderSend(Symbol(), 1, gd_888, Bid, 0, 0, ls_32 + gs_440 + " > " + gi_844, gi_844, gi_428);
               debugMsg(gs_432 + " sent new market trade, got Order# " + l_ticket_16);
               if (l_ticket_16 != -1) {
                  OrderSelect(l_ticket_16, SELECT_BY_TICKET);
                  l_bool_20 = OrderModify(OrderTicket(), OrderOpenPrice(), 0, OrderOpenPrice() - GridProfit * Point*10, 0);
                  debugMsg("Modifying Order#" + l_ticket_16 + "returned: " + l_bool_20);
               }
            } else {
               l_ticket_16 = MyOrderSend(Symbol(), 1, gd_888, Bid, 0, Bid - GridProfit * Point, ls_32 + gs_440 + " > " + gi_844, gi_844, gi_428);
               debugMsg(gs_432 + " sent new instant trade, got Order# " + l_ticket_16);
            }
         }
      }
      gd_808 -= gd_776 * Point;
      gd_816 = gd_808 + (gd_776 + GridOpen) * Point;
      gi_832 = FALSE;
      gi_836 = TRUE;
   }
   if (Ask <= gd_824 && gi_832) {
      gd_824 -= gd_776 * Point;
      gd_800 -= gd_776 * Point;
   }
   if (Bid >= gd_816 && gi_836) {
      gd_816 += gd_776 * Point;
      gd_808 += gd_776 * Point;
   }
   doHUD(0);
   gi_868 = FALSE;
   GlobalVariableSet("NasProfit" + gi_428, gi_840);
   return (0);
}

int doHUD(bool ai_0) {
   int li_4 = gi_376;
   int l_count_8 = 1;
   WaterMark(gs_432, "Version " + gs_440 + " " + gs_516, 0, 3, 16711935);
   if (gi_524) MyComment(gi_868, 3, 2, " ", "DEBUG", 65535, 65535, 20);
   else MyComment(gi_868, 3, 2, " ", " ", 65535, 65535, 20);
   if (gi_532) {
      if (gi_536 == 1) {
         gi_536 = gi_220;
         MyComment(gi_868, li_4, l_count_8, "User Status", gsa_452[gi_536], gi_752, gi_756, gi_732);
         l_count_8++;
      } else {
         MyComment(gi_868, li_4, l_count_8, "User Status", gsa_452[gi_536], gi_752, 65535, gi_732);
         l_count_8++;
      }
   } else {
      MyComment(gi_868, li_4, l_count_8, "User Status", "DEMO", gi_752, gi_756, gi_732);
      l_count_8++;
   }
   MyComment(gi_868, li_4, l_count_8, "Trade Enable", Bool2Text(TradeEnable), gi_752, gi_756, gi_732);
   l_count_8++;
   MyComment(gi_868, li_4, l_count_8, "Status", gsa_856[gi_852], gi_752, gi_756, gi_732);
   l_count_8++;
   if (gi_524) {
      l_count_8++;
      MyComment(gi_868, li_4, l_count_8, "Original", Bool2Text(gi_528), gi_752, gi_756, gi_732);
      l_count_8++;
      MyComment(gi_868, li_4, l_count_8, "Direction", gsa_396[gi_840], gi_752, gi_756, gi_732);
      l_count_8++;
      MyComment(gi_868, li_4, l_count_8, "NextUpDown", DoubleToStr(gd_824, Digits), gi_752, gi_756, gi_732);
      l_count_8++;
      MyComment(gi_868, li_4, l_count_8, "NextUp", DoubleToStr(gd_800, Digits), gi_752, gi_756, gi_732);
      l_count_8++;
      MyComment(gi_868, li_4, l_count_8, "NextDown", DoubleToStr(gd_808, Digits), gi_752, gi_756, gi_732);
      l_count_8++;
      MyComment(gi_868, li_4, l_count_8, "NextDownUp", DoubleToStr(gd_816, Digits), gi_752, gi_756, gi_732);
      l_count_8++;
      MyComment(gi_868, li_4, l_count_8, "Grid Open", GridOpen, gi_752, gi_756, gi_732);
      l_count_8++;
      MyComment(gi_868, li_4, l_count_8, "Grid Profit", GridProfit, gi_752, gi_756, gi_732);
      l_count_8++;
      MyComment(gi_868, li_4, l_count_8, "Lot Size", DoubleToStr(gd_888, 2), gi_752, gi_756, gi_732);
      l_count_8++;
   }
   if (gi_572) {
      li_4 = gi_376;
      MyComment(gi_868, li_4, l_count_8, "Grid Open", GridOpen, gi_752, gi_756, gi_732);
      l_count_8++;
      MyComment(gi_868, li_4, l_count_8, "Grid Profit", GridProfit, gi_752, gi_756, gi_732);
      l_count_8++;
      MyComment(gi_868, li_4, l_count_8, "$Cash Guardian Profit", DailyProfit, gi_752, gi_756, gi_732);
      l_count_8++;
      MyComment(gi_868, li_4, l_count_8, "Lot Size", DoubleToStr(gd_888, Digits), gi_752, gi_756, gi_732);
      l_count_8++;
      li_4 = gi_372;
      MyComment(gi_868, li_4, 2, "ADR Days", Days2Average, gi_752, gi_752, 10);
      MyComment(gi_868, li_4, 3, "ADR", DoubleToStr(GetDailyRange(Days2Average, 0), 0), gi_752, gi_756, 12);
      MyComment(gi_868, li_4, 4, "AMR Months", Months2Average, gi_752, gi_752, 10);
      if (Months2Average > 0) MyComment(gi_868, li_4, 5, "AMR", DoubleToStr(GetMonthlyRange(Months2Average, 0), 0), gi_752, gi_756, 12);
      else MyComment(gi_868, li_4, 5, "AMR", 0, 15453831, 16777215, 12);
   }
   if (ai_0) for (l_count_8 = 0; l_count_8 < 10; l_count_8++) MyComment(gi_868, li_4, l_count_8, " ", " ", gi_752, gi_756, gi_732);
   ObjectsRedraw();
   return (0);
}